---
swagger: "2.0"
info:
  description: "Deterministic or pseudo-random data generator"
  version: "1.0.0"
  title: "Pseudo Service"
  termsOfService: "http://swagger.io/terms/"
  contact:
    name: "Swagger API Team"
  license:
    name: "AGPL 2.0"
host: "localhost"
basePath: "/api/v1/"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /users/{count}:
    get:
      description: "Get a random user"
      parameters:
      - name: "count"
        in: "path"
        description: "How many users to return"
        required: true
        type: "integer"
        format: "int32"
        maximum: 500
        minimum: 1
        x-exportParamName: "Count"
      - name: "seed"
        format: "int64"
        in: "query"
        description: "Seed that will be used to generate the users (deterministic call). The seed will determine the first User data, seed+1 the next user, and so on. If no seed is provided a pseudo-random one will be generated (rand.Int63)."
        required: false
        type: "integer"
        x-exportParamName: "Seed"
      responses:
        200:
          description: "The users were successfully generated"
          schema:
            $ref: "#/definitions/ResponseModel"
        default:
          description: "Error occurred"
          schema:
            $ref: "#/definitions/ErrorModel"
      security:
      - apikey: []
securityDefinitions:
  apikey:
    type: "apiKey"
    name: "token"
    in: "query"
definitions:
  User:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "string"
        example: "356b1896-ee58-4fd8-931d-4cfaee21158e"
        description: "UUID for this user"
      age:
        type: "number"
        minimum: 0
        maximum: 255
      name:
        type: "string"
        example: "John Doe"
        description: "First and Last name"
      Company:
        type: "string"
        example: "De-engineered niches Group"
      position:
        type: "string"
        example: "Central Branding Producer"
      email:
        type: "string"
        example: "john@mambo.dot"
      country:
        type: "string"
        example: "Romania"
      friends:
        type: "array"
        example:
        - "356b1896-ee58-4fd8-931d-4cfaee21158e"
        - "3d813194-e9ed-4b09-a1ae-301b83bfdd9d"
        description: "Random list of UUIDs from the same response. To increase the chance of having friends request for bigger batches."
        items:
          type: "string"
          example: "356b1896-ee58-4fd8-931d-4cfaee21158e"
          description: "UUID for this friend"
    example:
      id: "356b1896-ee58-4fd8-931d-4cfaee21158e"
      age: 33
      name: "John Doe"
      company: "De-engineered niches Group"
      position: "Central Branding Producer"
      email: "john@mambo.dot"
      country: "Romania"
      friends:
      - "3d813194-e9ed-4b09-a1ae-301b83bfdd9d"
      - "356b1896-ee58-4fd8-931d-4cfaee21158e"
  ResponseModel:
    type: "object"
    properties:
      seed:
        type: "integer"
        format: "int64"
        description: "Number that was used to generate these users"
      nextseed:
        type: "integer"
        format: "int64"
        description: "Use this to get the next users from the deterministic series"
      users:
        type: "array"
        items:
          $ref: "#/definitions/User"
    example:
      nextseed: 6
      seed: 0
      users:
      - id: "356b1896-ee58-4fd8-931d-4cfaee21158e"
        age: 33
        name: "John Doe"
        company: "De-engineered niches Group"
        position: "Central Branding Producer"
        email: "john@mambo.dot"
        country: "Romania"
        friends:
        - "3d813194-e9ed-4b09-a1ae-301b83bfdd9d"
        - "356b1896-ee58-4fd8-931d-4cfaee21158e"
  ErrorModel:
    type: "object"
    required:
    - "code"
    - "message"
    properties:
      code:
        type: "integer"
        format: "int32"
      message:
        type: "string"
    example:
      code: 42
      message: "Something went wrong"
