/*
 * Pseudo Service
 *
 * Deterministic or pseudo-random data generator
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"net/http"
	"strconv"

	"github.com/bgadrian/pseudoservice/users"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

type Routes []Route

func NewRouter(routes Routes, middlewares []mux.MiddlewareFunc) *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		for _, middleware := range middlewares {
			handler = middleware(handler)
		}

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

const PARAM_COUNT = "count"
const PARAM_SEED = "seed"

func UsersCountGet(w http.ResponseWriter, r *http.Request) {
	var err error

	userCountStr, exists := mux.Vars(r)[PARAM_COUNT]
	if exists == false {
		w.WriteHeader(http.StatusBadRequest)
		w.Write(NewErrorJson(ERROR_MISSING_COUNT, "parameter required: "+PARAM_COUNT))
		return
	}
	userCount, err := strconv.Atoi(userCountStr)
	//TODO move the 500 limit to config (magic number)
	if err != nil || userCount < 1 || userCount > 500 {
		w.WriteHeader(http.StatusBadRequest)
		w.Write(NewErrorJson(ERROR_WRONG_COUNT, "count must be a valid integer >= 1 and <= 500"))
		return
	}

	var seed int64
	queryValues := r.URL.Query()
	seedStr, exists := queryValues[PARAM_SEED]
	exists = exists && len(seedStr) > 0
	if exists {
		seed, err = strconv.ParseInt(seedStr[0], 10, 64)

		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			w.Write(NewErrorJson(ERROR_WRONG_SEED, "seed must be a valid int64"))
			return
		}
	} else {
		seed = rand.Int63()
	}

	userList, nextSeed, err := users.GenerateUsers(seed, userCount, exists)

	if exists == false {
		nextSeed = 0 //the response will be non-deterministic, so no use for it
	}

	if err != nil {
		log.Printf("error generate users: %s", err)

		w.WriteHeader(http.StatusInternalServerError)
		w.Write(NewErrorJson(ERROR_GENERATING_USERS, "internal error (users)"))
		return
	}

	result := ResponseModel{
		Nextseed: nextSeed,
		Seed:     seed,
		Users:    userList,
	}
	resultAsJson, err := json.Marshal(result)
	if err != nil {
		log.Printf("error writing users: %s", err)

		w.WriteHeader(http.StatusInternalServerError)
		w.Write(NewErrorJson(ERROR_GENERATING_USERS, "internal error (users)"))
		return
	}
	w.Write(resultAsJson)
}

func DefaultRoutes(basePath string) Routes {
	return Routes{
		Route{
			Name:        "index",
			Pattern:     basePath + "/",
			Method:      http.MethodGet,
			HandlerFunc: Index,
		}, Route{
			Name:        "usersCount",
			Pattern:     basePath + "/users/{count}",
			Method:      http.MethodGet,
			HandlerFunc: UsersCountGet,
		},
	}
}
