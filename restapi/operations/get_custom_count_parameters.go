// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCustomCountParams creates a new GetCustomCountParams object
// no default values defined in spec.
func NewGetCustomCountParams() GetCustomCountParams {

	return GetCustomCountParams{}
}

// GetCustomCountParams contains all the bound params for the get custom count operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetCustomCount
type GetCustomCountParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*How many results to generate.
	  Required: true
	  Maximum: 500
	  Minimum: 1
	  In: path
	*/
	Count int32
	/*The seed for the pseudo-random generator. For each unique value the same results will be given. If no seed is provided a pseudo-random one will be generated (rand.Int63).
	  In: query
	*/
	Seed *int64
	/*The template used to generate the results, eg: 'My name is ~name~'
	  Required: true
	  Max Length: 1024
	  Min Length: 1
	  In: query
	*/
	Template string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetCustomCountParams() beforehand.
func (o *GetCustomCountParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	rCount, rhkCount, _ := route.Params.GetOK("count")
	if err := o.bindCount(rCount, rhkCount, route.Formats); err != nil {
		res = append(res, err)
	}

	qSeed, qhkSeed, _ := qs.GetOK("seed")
	if err := o.bindSeed(qSeed, qhkSeed, route.Formats); err != nil {
		res = append(res, err)
	}

	qTemplate, qhkTemplate, _ := qs.GetOK("template")
	if err := o.bindTemplate(qTemplate, qhkTemplate, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindCount binds and validates parameter Count from path.
func (o *GetCustomCountParams) bindCount(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	value, err := swag.ConvertInt32(raw)
	if err != nil {
		return errors.InvalidType("count", "path", "int32", raw)
	}
	o.Count = value

	if err := o.validateCount(formats); err != nil {
		return err
	}

	return nil
}

// validateCount carries on validations for parameter Count
func (o *GetCustomCountParams) validateCount(formats strfmt.Registry) error {

	if err := validate.MinimumInt("count", "path", int64(o.Count), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("count", "path", int64(o.Count), 500, false); err != nil {
		return err
	}

	return nil
}

// bindSeed binds and validates parameter Seed from query.
func (o *GetCustomCountParams) bindSeed(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("seed", "query", "int64", raw)
	}
	o.Seed = &value

	return nil
}

// bindTemplate binds and validates parameter Template from query.
func (o *GetCustomCountParams) bindTemplate(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("template", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("template", "query", raw); err != nil {
		return err
	}

	o.Template = raw

	if err := o.validateTemplate(formats); err != nil {
		return err
	}

	return nil
}

// validateTemplate carries on validations for parameter Template
func (o *GetCustomCountParams) validateTemplate(formats strfmt.Registry) error {

	if err := validate.MinLength("template", "query", o.Template, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("template", "query", o.Template, 1024); err != nil {
		return err
	}

	return nil
}
