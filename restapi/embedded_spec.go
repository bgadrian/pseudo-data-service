// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Deterministic or pseudo-random data generator",
    "title": "Pseudo Service",
    "contact": {
      "name": "https://github.com/bgadrian"
    },
    "license": {
      "name": "AGPL 2.0"
    },
    "version": "1.0.0"
  },
  "host": "localhost",
  "basePath": "/",
  "paths": {
    "/custom/{count}": {
      "get": {
        "security": [
          {
            "apikey": []
          }
        ],
        "description": "Generate results based on a pattern/template.",
        "parameters": [
          {
            "$ref": "#/parameters/count"
          },
          {
            "$ref": "#/parameters/seed"
          },
          {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string",
            "description": "The template used to generate the results, eg: 'My name is ~name~'",
            "name": "template",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The results were successfully generated",
            "schema": {
              "$ref": "#/definitions/CustomResponseModel"
            }
          },
          "default": {
            "description": "Error occurred",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "description": "Get the health of the service",
        "responses": {
          "200": {
            "description": "Everything is fine"
          },
          "default": {
            "description": "Service is not available"
          }
        }
      }
    },
    "/users/{count}": {
      "get": {
        "description": "Get a random user",
        "parameters": [
          {
            "$ref": "#/parameters/count"
          },
          {
            "$ref": "#/parameters/seed"
          }
        ],
        "responses": {
          "200": {
            "description": "The users were successfully generated",
            "schema": {
              "$ref": "#/definitions/UserResponseModel"
            }
          },
          "default": {
            "description": "Error occurred",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CustomResponseModel": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "description": "One result is one template with random data",
            "type": "string"
          }
        },
        "seed": {
          "description": "Number that was used to generate these results",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ErrorModel": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      },
      "example": {
        "code": 42,
        "message": "Something went wrong"
      }
    },
    "User": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "Company": {
          "type": "string",
          "example": "De-engineered niches Group"
        },
        "age": {
          "type": "number",
          "format": "int32",
          "maximum": 255,
          "minimum": 0
        },
        "country": {
          "type": "string",
          "example": "Romania"
        },
        "email": {
          "type": "string",
          "example": "john@mambo.dot"
        },
        "friends": {
          "description": "Random list of UUIDs from the same response. To increase the chance of having friends request for bigger batches.",
          "type": "array",
          "items": {
            "description": "UUID for this friend",
            "type": "string",
            "example": "356b1896-ee58-4fd8-931d-4cfaee21158e"
          },
          "example": [
            "356b1896-ee58-4fd8-931d-4cfaee21158e",
            "3d813194-e9ed-4b09-a1ae-301b83bfdd9d"
          ]
        },
        "id": {
          "description": "UUID for this user",
          "type": "string",
          "format": "uuid",
          "example": "356b1896-ee58-4fd8-931d-4cfaee21158e"
        },
        "name": {
          "description": "First and Last name",
          "type": "string",
          "example": "John Doe"
        },
        "position": {
          "type": "string",
          "example": "Central Branding Producer"
        }
      },
      "example": {
        "age": 33,
        "company": "De-engineered niches Group",
        "country": "Romania",
        "email": "john@mambo.dot",
        "friends": [
          "3d813194-e9ed-4b09-a1ae-301b83bfdd9d",
          "356b1896-ee58-4fd8-931d-4cfaee21158e"
        ],
        "id": "356b1896-ee58-4fd8-931d-4cfaee21158e",
        "name": "John Doe",
        "position": "Central Branding Producer"
      }
    },
    "UserResponseModel": {
      "type": "object",
      "properties": {
        "nextseed": {
          "description": "Use this to get the next users from the deterministic series",
          "type": "integer",
          "format": "int64"
        },
        "seed": {
          "description": "Number that was used to generate these users",
          "type": "integer",
          "format": "int64"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      },
      "example": {
        "nextseed": 6,
        "seed": 0,
        "users": [
          {
            "age": 33,
            "company": "De-engineered niches Group",
            "country": "Romania",
            "email": "john@mambo.dot",
            "friends": [
              "3d813194-e9ed-4b09-a1ae-301b83bfdd9d",
              "356b1896-ee58-4fd8-931d-4cfaee21158e"
            ],
            "id": "356b1896-ee58-4fd8-931d-4cfaee21158e",
            "name": "John Doe",
            "position": "Central Branding Producer"
          }
        ]
      }
    }
  },
  "parameters": {
    "count": {
      "maximum": 500,
      "minimum": 1,
      "type": "integer",
      "format": "int32",
      "description": "How many results to generate.",
      "name": "count",
      "in": "path",
      "required": true
    },
    "seed": {
      "type": "integer",
      "format": "int64",
      "description": "The seed for the pseudo-random generator. For each unique value the same results will be given. If no seed is provided a pseudo-random one will be generated (rand.Int63).",
      "name": "seed",
      "in": "query"
    }
  },
  "securityDefinitions": {
    "apikey": {
      "type": "apiKey",
      "name": "token",
      "in": "query"
    }
  },
  "security": [
    {
      "apikey": []
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Deterministic or pseudo-random data generator",
    "title": "Pseudo Service",
    "contact": {
      "name": "https://github.com/bgadrian"
    },
    "license": {
      "name": "AGPL 2.0"
    },
    "version": "1.0.0"
  },
  "host": "localhost",
  "basePath": "/",
  "paths": {
    "/custom/{count}": {
      "get": {
        "security": [
          {
            "apikey": []
          }
        ],
        "description": "Generate results based on a pattern/template.",
        "parameters": [
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "description": "How many results to generate.",
            "name": "count",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The seed for the pseudo-random generator. For each unique value the same results will be given. If no seed is provided a pseudo-random one will be generated (rand.Int63).",
            "name": "seed",
            "in": "query"
          },
          {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string",
            "description": "The template used to generate the results, eg: 'My name is ~name~'",
            "name": "template",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "The results were successfully generated",
            "schema": {
              "$ref": "#/definitions/CustomResponseModel"
            }
          },
          "default": {
            "description": "Error occurred",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "description": "Get the health of the service",
        "responses": {
          "200": {
            "description": "Everything is fine"
          },
          "default": {
            "description": "Service is not available"
          }
        }
      }
    },
    "/users/{count}": {
      "get": {
        "description": "Get a random user",
        "parameters": [
          {
            "maximum": 500,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "description": "How many results to generate.",
            "name": "count",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "format": "int64",
            "description": "The seed for the pseudo-random generator. For each unique value the same results will be given. If no seed is provided a pseudo-random one will be generated (rand.Int63).",
            "name": "seed",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "The users were successfully generated",
            "schema": {
              "$ref": "#/definitions/UserResponseModel"
            }
          },
          "default": {
            "description": "Error occurred",
            "schema": {
              "$ref": "#/definitions/ErrorModel"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "CustomResponseModel": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "description": "One result is one template with random data",
            "type": "string"
          }
        },
        "seed": {
          "description": "Number that was used to generate these results",
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ErrorModel": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        }
      },
      "example": {
        "code": 42,
        "message": "Something went wrong"
      }
    },
    "User": {
      "type": "object",
      "required": [
        "id",
        "name"
      ],
      "properties": {
        "Company": {
          "type": "string",
          "example": "De-engineered niches Group"
        },
        "age": {
          "type": "number",
          "format": "int32",
          "maximum": 255,
          "minimum": 0
        },
        "country": {
          "type": "string",
          "example": "Romania"
        },
        "email": {
          "type": "string",
          "example": "john@mambo.dot"
        },
        "friends": {
          "description": "Random list of UUIDs from the same response. To increase the chance of having friends request for bigger batches.",
          "type": "array",
          "items": {
            "description": "UUID for this friend",
            "type": "string",
            "example": "356b1896-ee58-4fd8-931d-4cfaee21158e"
          },
          "example": [
            "356b1896-ee58-4fd8-931d-4cfaee21158e",
            "3d813194-e9ed-4b09-a1ae-301b83bfdd9d"
          ]
        },
        "id": {
          "description": "UUID for this user",
          "type": "string",
          "format": "uuid",
          "example": "356b1896-ee58-4fd8-931d-4cfaee21158e"
        },
        "name": {
          "description": "First and Last name",
          "type": "string",
          "example": "John Doe"
        },
        "position": {
          "type": "string",
          "example": "Central Branding Producer"
        }
      },
      "example": {
        "age": 33,
        "company": "De-engineered niches Group",
        "country": "Romania",
        "email": "john@mambo.dot",
        "friends": [
          "3d813194-e9ed-4b09-a1ae-301b83bfdd9d",
          "356b1896-ee58-4fd8-931d-4cfaee21158e"
        ],
        "id": "356b1896-ee58-4fd8-931d-4cfaee21158e",
        "name": "John Doe",
        "position": "Central Branding Producer"
      }
    },
    "UserResponseModel": {
      "type": "object",
      "properties": {
        "nextseed": {
          "description": "Use this to get the next users from the deterministic series",
          "type": "integer",
          "format": "int64"
        },
        "seed": {
          "description": "Number that was used to generate these users",
          "type": "integer",
          "format": "int64"
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      },
      "example": {
        "nextseed": 6,
        "seed": 0,
        "users": [
          {
            "age": 33,
            "company": "De-engineered niches Group",
            "country": "Romania",
            "email": "john@mambo.dot",
            "friends": [
              "3d813194-e9ed-4b09-a1ae-301b83bfdd9d",
              "356b1896-ee58-4fd8-931d-4cfaee21158e"
            ],
            "id": "356b1896-ee58-4fd8-931d-4cfaee21158e",
            "name": "John Doe",
            "position": "Central Branding Producer"
          }
        ]
      }
    }
  },
  "parameters": {
    "count": {
      "maximum": 500,
      "minimum": 1,
      "type": "integer",
      "format": "int32",
      "description": "How many results to generate.",
      "name": "count",
      "in": "path",
      "required": true
    },
    "seed": {
      "type": "integer",
      "format": "int64",
      "description": "The seed for the pseudo-random generator. For each unique value the same results will be given. If no seed is provided a pseudo-random one will be generated (rand.Int63).",
      "name": "seed",
      "in": "query"
    }
  },
  "securityDefinitions": {
    "apikey": {
      "type": "apiKey",
      "name": "token",
      "in": "query"
    }
  },
  "security": [
    {
      "apikey": []
    }
  ]
}`))
}
